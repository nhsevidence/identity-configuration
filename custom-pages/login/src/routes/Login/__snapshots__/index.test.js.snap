// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login components should render <Login /> correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Fieldset
        legend="Personal Information"
      >
        <Input
          id="username"
          label="Username"
          name="username"
          onChange={[Function]}
          placeholder="eg: your.name@example.com..."
          type="email"
        />
        <Input
          label="Password"
          name="password"
          onChange={[Function]}
          type="password"
        />
        <button
          className="btn btn--cta"
          disabled={true}
          onClick={[Function]}
        >
          Sign in
        </button>
      </Fieldset>,
      "className": "",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          null,
          <Input
            id="username"
            label="Username"
            name="username"
            onChange={[Function]}
            placeholder="eg: your.name@example.com..."
            type="email"
          />,
          <Input
            label="Password"
            name="password"
            onChange={[Function]}
            type="password"
          />,
          <button
            className="btn btn--cta"
            disabled={true}
            onClick={[Function]}
          >
            Sign in
          </button>,
        ],
        "legend": "Personal Information",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": "username",
            "label": "Username",
            "name": "username",
            "onChange": [Function],
            "placeholder": "eg: your.name@example.com...",
            "type": "email",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "label": "Password",
            "name": "password",
            "onChange": [Function],
            "type": "password",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sign in",
            "className": "btn btn--cta",
            "disabled": true,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Sign in",
          "type": "button",
        },
      ],
      "type": [Function],
    },
    "type": "form",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Fieldset
          legend="Personal Information"
        >
          <Input
            id="username"
            label="Username"
            name="username"
            onChange={[Function]}
            placeholder="eg: your.name@example.com..."
            type="email"
          />
          <Input
            label="Password"
            name="password"
            onChange={[Function]}
            type="password"
          />
          <button
            className="btn btn--cta"
            disabled={true}
            onClick={[Function]}
          >
            Sign in
          </button>
        </Fieldset>,
        "className": "",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            null,
            <Input
              id="username"
              label="Username"
              name="username"
              onChange={[Function]}
              placeholder="eg: your.name@example.com..."
              type="email"
            />,
            <Input
              label="Password"
              name="password"
              onChange={[Function]}
              type="password"
            />,
            <button
              className="btn btn--cta"
              disabled={true}
              onClick={[Function]}
            >
              Sign in
            </button>,
          ],
          "legend": "Personal Information",
        },
        "ref": null,
        "rendered": Array [
          null,
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": "username",
              "label": "Username",
              "name": "username",
              "onChange": [Function],
              "placeholder": "eg: your.name@example.com...",
              "type": "email",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "label": "Password",
              "name": "password",
              "onChange": [Function],
              "type": "password",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign in",
              "className": "btn btn--cta",
              "disabled": true,
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign in",
            "type": "button",
          },
        ],
        "type": [Function],
      },
      "type": "form",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFourteenAdapter {
      "options": Object {
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
          "getChildContext": Object {
            "calledByRenderer": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
